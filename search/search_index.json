{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"django-admin-extra-buttons # This is a full rewriting of the original django-admin-extra-url . It provides decorators to easily add custom buttons to Django Admin pages and/or add views to any ModelAdmin It allows easy creation of wizards, actions and/or links to external resources as well as api only views. Three decorators are available: button() to mark a method as extra view and show related button link() This is used for \"external\" link, where you don't need to invoke local views. view() View only decorator, this adds a new url but do not render any button. choice() Menu like button, can be used to group multiple @views (). Install # pip install django-admin-extra-buttons After installation add it to INSTALLED_APPS INSTALLED_APPS = ( ... 'admin_extra_buttons', ) How to use it # from admin_extra_buttons.api import ExtraButtonsMixin, button, confirm_action, link, view from admin_extra_buttons.utils import HttpResponseRedirectToReferrer from django.http import HttpResponse, JsonResponse from django.contrib import admin from django.views.decorators.clickjacking import xframe_options_sameorigin from django.views.decorators.csrf import csrf_exempt class MyModelModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @button(permission='demo.add_demomodel1', change_form=True, html_attrs={'style': 'background-color:#88FF88;color:black'}) def refresh(self, request): self.message_user(request, 'refresh called') # Optional: returns HttpResponse return HttpResponseRedirectToReferrer(request) @button(html_attrs={'style': 'background-color:#DC6C6C;color:black'}) def confirm(self, request): def _action(request): pass return confirm_action(self, request, _action, \"Confirm action\", \"Successfully executed\", ) @link(href=None, change_list=False, html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'}) def search_on_google(self, button): original = button.context['original'] button.label = f\"Search '{original.name}' on Google\" button.href = f\"https://www.google.com/?q={original.name}\" @view() def select2_autocomplete(self, request): return JsonResponse({}) @view(http_basic_auth=True) def api4(self, request): return HttpResponse(\"Basic Authentication allowed\") @view(decorators=[csrf_exempt, xframe_options_sameorigin]) def preview(self, request): if request.method == \"POST\": return HttpResponse(\"POST\") return HttpResponse(\"GET\") Project Links # Code: https://github.com/saxix/django-admin-extra-buttons Documentation: https://saxix.github.io/django-admin-extra-buttons/ Issue Tracker: https://github.com/saxix/django-admin-extra-buttons/issues Download Package: https://pypi.org/project/django-admin-extra-buttons/","title":"Home"},{"location":"#django-admin-extra-buttons","text":"This is a full rewriting of the original django-admin-extra-url . It provides decorators to easily add custom buttons to Django Admin pages and/or add views to any ModelAdmin It allows easy creation of wizards, actions and/or links to external resources as well as api only views. Three decorators are available: button() to mark a method as extra view and show related button link() This is used for \"external\" link, where you don't need to invoke local views. view() View only decorator, this adds a new url but do not render any button. choice() Menu like button, can be used to group multiple @views ().","title":"django-admin-extra-buttons"},{"location":"#install","text":"pip install django-admin-extra-buttons After installation add it to INSTALLED_APPS INSTALLED_APPS = ( ... 'admin_extra_buttons', )","title":"Install"},{"location":"#how-to-use-it","text":"from admin_extra_buttons.api import ExtraButtonsMixin, button, confirm_action, link, view from admin_extra_buttons.utils import HttpResponseRedirectToReferrer from django.http import HttpResponse, JsonResponse from django.contrib import admin from django.views.decorators.clickjacking import xframe_options_sameorigin from django.views.decorators.csrf import csrf_exempt class MyModelModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @button(permission='demo.add_demomodel1', change_form=True, html_attrs={'style': 'background-color:#88FF88;color:black'}) def refresh(self, request): self.message_user(request, 'refresh called') # Optional: returns HttpResponse return HttpResponseRedirectToReferrer(request) @button(html_attrs={'style': 'background-color:#DC6C6C;color:black'}) def confirm(self, request): def _action(request): pass return confirm_action(self, request, _action, \"Confirm action\", \"Successfully executed\", ) @link(href=None, change_list=False, html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'}) def search_on_google(self, button): original = button.context['original'] button.label = f\"Search '{original.name}' on Google\" button.href = f\"https://www.google.com/?q={original.name}\" @view() def select2_autocomplete(self, request): return JsonResponse({}) @view(http_basic_auth=True) def api4(self, request): return HttpResponse(\"Basic Authentication allowed\") @view(decorators=[csrf_exempt, xframe_options_sameorigin]) def preview(self, request): if request.method == \"POST\": return HttpResponse(\"POST\") return HttpResponse(\"GET\")","title":"How to use it"},{"location":"#project-links","text":"Code: https://github.com/saxix/django-admin-extra-buttons Documentation: https://saxix.github.io/django-admin-extra-buttons/ Issue Tracker: https://github.com/saxix/django-admin-extra-buttons/issues Download Package: https://pypi.org/project/django-admin-extra-buttons/","title":"Project Links"},{"location":"howto/","text":"How To # Build two steps action # This example shows how to create a button that display a form to upload a file and process it. admin_extra_buttons/upload.html {% extends \"admin_extra_buttons/action_page.html\" %} {% load i18n static admin_list admin_urls %} {% block action-content %} <form method=\"post\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Upload</button> </form> {% endblock %} admin.py class UploadForm(forms.Form): docfile = forms.FileField( label='Select a file') class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @button() def upload(self, request): context = self.get_common_context(request, title='Upload') if request.method == 'POST': form = UploadForm(request.POST, request.FILES) if form.is_valid(): downloaded_file = request.FILES['docfile'] # process file ... ... return redirect(admin_urlname(context['opts'], 'changelist') ) else: form = UploadForm() context['form'] = form return TemplateResponse(request, 'admin_extra_buttons/upload.html', context)","title":"How To"},{"location":"howto/#how-to","text":"","title":"How To"},{"location":"howto/#build-two-steps-action","text":"This example shows how to create a button that display a form to upload a file and process it. admin_extra_buttons/upload.html {% extends \"admin_extra_buttons/action_page.html\" %} {% load i18n static admin_list admin_urls %} {% block action-content %} <form method=\"post\" enctype=\"multipart/form-data\"> {% csrf_token %} {{ form.as_p }} <button type=\"submit\">Upload</button> </form> {% endblock %} admin.py class UploadForm(forms.Form): docfile = forms.FileField( label='Select a file') class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @button() def upload(self, request): context = self.get_common_context(request, title='Upload') if request.method == 'POST': form = UploadForm(request.POST, request.FILES) if form.is_valid(): downloaded_file = request.FILES['docfile'] # process file ... ... return redirect(admin_urlname(context['opts'], 'changelist') ) else: form = UploadForm() context['form'] = form return TemplateResponse(request, 'admin_extra_buttons/upload.html', context)","title":"Build two steps action"},{"location":"api/button/","text":"@button () # This decorator transform any ModelAdmin method to a view and add a button to the Admin objects toolbar. Examples: from admin_extra_buttons.api import ExtraButtonsMixin, button class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @button() def refresh_all(self, request): # your business logic here ... self.message_user(request, 'refresh called') # do not return HttpResponse(), so user will be redirected to the original page @button() def scan(self, request): return HttpResponse(\"Done\") # return specific response @button() def scan(self, request): if request.method == 'POST': .... else: return TemplateResponse() Note AEB try to understand if a button should appear in the change_form and/or in the change_list page. If the decorated method has only one argument (es. def scan(self, request) ), the button will only be visible on the change_list page, if it contains more that one argumente (es. def scan(self, request, pk) ) the button will be visible in the change_form page. Options # change_form: None set to True do show the button on the change_form page If set to None (default), use method signature to display the button change_list: None set to True do show the button on the change_list page If set to None (default), use method signature to display the button disable_on_click: True automatically disable button on click() to prevent unintentional double processing disable_on_edit: True automatically disable button when any FORM in page is modified enabled: True bool or callable to set enable status html_attrs: {} Dictionary of html tags to use in button rendering. label: decorated method name button label visible: True bool or callable show/hide button Note id is automacally set if not provided, class is updated/set based on disable_on_click and disable_on_edit values label: decorated method name button label pattern: <function_name>/<path:arg1>/<path:arg2>/.... url pattern to use for the url genaration. permission: None Django permission code needed to access the view and display the button Examples # Simple # Simplest usage. Display a button and create a view on admin/mymodel/scan . @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @button() def scan(self, request): pass Check Permissions # Buttons with custom permission, one for change_list and other for change_form @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @button(permission=lambda request, obj: request.user.is_superuser) def delete_all(self, request): pass @button(permission='app.delete_mymodel) def mark(self, request, pk): obj = self.get_object(request.pk) obj.mark = True obj.save() Fully featured # Buttons with custom permission, one for change_list and other for change_form @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @button(permission=lambda request, obj: request.user.is_superuser, html_attrs={'style': 'background-color:var(--button-bg)'}, label=_('Delete All Records'), change_form=True ) def delete_all(self, request): pass @button(permission=lambda request, obj: request.user.is_superuser, html_attrs={'style': 'background-color:var(--button-bg)'}, enabled=lambda btn: btn.original.status == SUCCESS, label=_('Delete All Records'), change_form=True ) def toggle(self, request, pk): pass","title":"@button"},{"location":"api/button/#button","text":"This decorator transform any ModelAdmin method to a view and add a button to the Admin objects toolbar. Examples: from admin_extra_buttons.api import ExtraButtonsMixin, button class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @button() def refresh_all(self, request): # your business logic here ... self.message_user(request, 'refresh called') # do not return HttpResponse(), so user will be redirected to the original page @button() def scan(self, request): return HttpResponse(\"Done\") # return specific response @button() def scan(self, request): if request.method == 'POST': .... else: return TemplateResponse() Note AEB try to understand if a button should appear in the change_form and/or in the change_list page. If the decorated method has only one argument (es. def scan(self, request) ), the button will only be visible on the change_list page, if it contains more that one argumente (es. def scan(self, request, pk) ) the button will be visible in the change_form page.","title":"@button()"},{"location":"api/button/#options","text":"change_form: None set to True do show the button on the change_form page If set to None (default), use method signature to display the button change_list: None set to True do show the button on the change_list page If set to None (default), use method signature to display the button disable_on_click: True automatically disable button on click() to prevent unintentional double processing disable_on_edit: True automatically disable button when any FORM in page is modified enabled: True bool or callable to set enable status html_attrs: {} Dictionary of html tags to use in button rendering. label: decorated method name button label visible: True bool or callable show/hide button Note id is automacally set if not provided, class is updated/set based on disable_on_click and disable_on_edit values label: decorated method name button label pattern: <function_name>/<path:arg1>/<path:arg2>/.... url pattern to use for the url genaration. permission: None Django permission code needed to access the view and display the button","title":"Options"},{"location":"api/button/#examples","text":"","title":"Examples"},{"location":"api/button/#simple","text":"Simplest usage. Display a button and create a view on admin/mymodel/scan . @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @button() def scan(self, request): pass","title":"Simple"},{"location":"api/button/#check-permissions","text":"Buttons with custom permission, one for change_list and other for change_form @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @button(permission=lambda request, obj: request.user.is_superuser) def delete_all(self, request): pass @button(permission='app.delete_mymodel) def mark(self, request, pk): obj = self.get_object(request.pk) obj.mark = True obj.save()","title":"Check Permissions"},{"location":"api/button/#fully-featured","text":"Buttons with custom permission, one for change_list and other for change_form @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @button(permission=lambda request, obj: request.user.is_superuser, html_attrs={'style': 'background-color:var(--button-bg)'}, label=_('Delete All Records'), change_form=True ) def delete_all(self, request): pass @button(permission=lambda request, obj: request.user.is_superuser, html_attrs={'style': 'background-color:var(--button-bg)'}, enabled=lambda btn: btn.original.status == SUCCESS, label=_('Delete All Records'), change_form=True ) def toggle(self, request, pk): pass","title":"Fully featured"},{"location":"api/choice/","text":"@choice () # This decorator allows \"grouping\" different @view() decorated methods under the same HTML <select> Examples: from admin_extra_buttons.api import ExtraButtonsMixin, choice, view class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @choice(change_list=True) def menu1(self, button): button.choices = [self.test1, self.test2] @view() def test1(self, request): self.message_user(request, \"You have selected test1\") @view() def test2(self, request, pk): context = self.get_common_context(request, pk) self.message_user(request, f\"You have selected test22 on {context['original']}\") return TemplateResponse(request, \"demo/test22.html\", context) Options # change_form: True display the button on the change_form page change_list: True display the button on the change_list page enabled: True bool or callable to set enable status html_attrs: {} Dictionary of html tags to use in button rendering label: decorated method name button label visible: True bool or callable show/hide button Attributes # context TemplateContext from the Django template as at the moment of rendering Examples # Complex Configuration # class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @choice(label=\"Menu #1\", change_list=False, html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'}) def menu1(self, button): original = button.original button.label = f\"Search '{original.name}' on Google\" if button.requst.user.is_superuser: button.choices = [self.feat1, self.feat2, self.feat3, self.feat4] else: button.choices = [self.feat1, self.feat2] @view() def feat1(self, request): self.message_user(request, \"You have selected Feature #1\") @view() def feat2(self, request): return TemplateResponse(request, \"demo/feat2.html\", context) @view(permission=lambda request, obj: request.user.is_superuser) def feat3(self, request): return HttpResponse(\"You have selected Feature #3\") @view(permission=lambda request, obj: request.user.is_superuser) def feat3(self, request): self.message_user(request, \"You have selected Feature #3\")","title":"@choice"},{"location":"api/choice/#choice","text":"This decorator allows \"grouping\" different @view() decorated methods under the same HTML <select> Examples: from admin_extra_buttons.api import ExtraButtonsMixin, choice, view class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @choice(change_list=True) def menu1(self, button): button.choices = [self.test1, self.test2] @view() def test1(self, request): self.message_user(request, \"You have selected test1\") @view() def test2(self, request, pk): context = self.get_common_context(request, pk) self.message_user(request, f\"You have selected test22 on {context['original']}\") return TemplateResponse(request, \"demo/test22.html\", context)","title":"@choice()"},{"location":"api/choice/#options","text":"change_form: True display the button on the change_form page change_list: True display the button on the change_list page enabled: True bool or callable to set enable status html_attrs: {} Dictionary of html tags to use in button rendering label: decorated method name button label visible: True bool or callable show/hide button","title":"Options"},{"location":"api/choice/#attributes","text":"context TemplateContext from the Django template as at the moment of rendering","title":"Attributes"},{"location":"api/choice/#examples","text":"","title":"Examples"},{"location":"api/choice/#complex-configuration","text":"class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @choice(label=\"Menu #1\", change_list=False, html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'}) def menu1(self, button): original = button.original button.label = f\"Search '{original.name}' on Google\" if button.requst.user.is_superuser: button.choices = [self.feat1, self.feat2, self.feat3, self.feat4] else: button.choices = [self.feat1, self.feat2] @view() def feat1(self, request): self.message_user(request, \"You have selected Feature #1\") @view() def feat2(self, request): return TemplateResponse(request, \"demo/feat2.html\", context) @view(permission=lambda request, obj: request.user.is_superuser) def feat3(self, request): return HttpResponse(\"You have selected Feature #3\") @view(permission=lambda request, obj: request.user.is_superuser) def feat3(self, request): self.message_user(request, \"You have selected Feature #3\")","title":"Complex Configuration"},{"location":"api/handlers/","text":"Handlers # Warning This is an internal API and should be used only for extend/customise core behaviours. ButtonHandler # View handler for @button decorated views LinkHandler # View handler for @link decorated views ViewHandler # View handler for @view decorated views ViewButton # Button class for Django views based buttons LinkButton # Button class for links based buttons (buttons not linked to Django views) ChoiceButton # Button class for choices buttons","title":"Handlers"},{"location":"api/handlers/#handlers","text":"Warning This is an internal API and should be used only for extend/customise core behaviours.","title":"Handlers"},{"location":"api/handlers/#buttonhandler","text":"View handler for @button decorated views","title":"ButtonHandler"},{"location":"api/handlers/#linkhandler","text":"View handler for @link decorated views","title":"LinkHandler"},{"location":"api/handlers/#viewhandler","text":"View handler for @view decorated views","title":"ViewHandler"},{"location":"api/handlers/#viewbutton","text":"Button class for Django views based buttons","title":"ViewButton"},{"location":"api/handlers/#linkbutton","text":"Button class for links based buttons (buttons not linked to Django views)","title":"LinkButton"},{"location":"api/handlers/#choicebutton","text":"Button class for choices buttons","title":"ChoiceButton"},{"location":"api/link/","text":"@link () # Use this decorator if you want to create links to external resources or if you already have the required view. Note @link () buttons by defaults are visible both on change_list and change_form pages Examples: from admin_extra_buttons.api import ExtraButtonsMixin, link class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @link(href=\"https://www.google.com/\", change_form=False) def google(self, button): pass @link(href=None, change_list=False) def search_on_google(self, button): button.label = f\"Search '{button.original.name}' on Google\" button.href = f\"https://www.google.com/?q={button.original.name}\" Options # change_form: True display the button on the change_form page change_list: True display the button on the change_list page href: \"\"\" HTML href attribute value enabled: True bool or callable to set enable status html_attrs: {} Dictionary of html tags to use in button rendering label: decorated method name button label visible: True bool or callable show/hide button Attributes # context TemplateContext from the Django template as at the moment of rendering Examples # Dynamic Configuration # class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @link(href=None, change_list=False) def search_on_google(self, button): button.label = f\"Search '{button.original.name}' on Google\" button.href = f\"https://www.google.com/?q={original.name}\" Fully featured # class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @link(href=None, change_list=False, html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'}) def search_on_google(self, button): button.label = f\"Search '{button.original.name}' on Google\" button.href = f\"https://www.google.com/?q={button.original.name}\"","title":"@link"},{"location":"api/link/#link","text":"Use this decorator if you want to create links to external resources or if you already have the required view. Note @link () buttons by defaults are visible both on change_list and change_form pages Examples: from admin_extra_buttons.api import ExtraButtonsMixin, link class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @link(href=\"https://www.google.com/\", change_form=False) def google(self, button): pass @link(href=None, change_list=False) def search_on_google(self, button): button.label = f\"Search '{button.original.name}' on Google\" button.href = f\"https://www.google.com/?q={button.original.name}\"","title":"@link()"},{"location":"api/link/#options","text":"change_form: True display the button on the change_form page change_list: True display the button on the change_list page href: \"\"\" HTML href attribute value enabled: True bool or callable to set enable status html_attrs: {} Dictionary of html tags to use in button rendering label: decorated method name button label visible: True bool or callable show/hide button","title":"Options"},{"location":"api/link/#attributes","text":"context TemplateContext from the Django template as at the moment of rendering","title":"Attributes"},{"location":"api/link/#examples","text":"","title":"Examples"},{"location":"api/link/#dynamic-configuration","text":"class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @link(href=None, change_list=False) def search_on_google(self, button): button.label = f\"Search '{button.original.name}' on Google\" button.href = f\"https://www.google.com/?q={original.name}\"","title":"Dynamic Configuration"},{"location":"api/link/#fully-featured","text":"class MyModelAdmin(ExtraButtonsMixin, admin.ModelAdmin): @link(href=None, change_list=False, html_attrs={'target': '_new', 'style': 'background-color:var(--button-bg)'}) def search_on_google(self, button): button.label = f\"Search '{button.original.name}' on Google\" button.href = f\"https://www.google.com/?q={button.original.name}\"","title":"Fully featured"},{"location":"api/mixin/","text":"ExtraButtonMixin # Mixin to use with ModelAdmin to properly handle button decorators Attributes # change_list_template Default admin_extra_buttons/change_list.html change_form_template Default admin_extra_buttons/change_form.html Methods # get_changeform_buttons(context) Return the list of buttons that will be displayed on the change form page. Default implementation returns all the buttons with change_form=True or change_form=None get_changelist_buttons(context) Return the list of buttons that will be displayed on the changelist page. Default implementation returns all the buttons with change_list=True or change_list=None get_action_buttons(context) Return the list of buttons that will be displayed on the extra action page. get_common_context() This method returns a django template Context filled with the common values that can be useful when create custom views that render templates. (@see Build two steps action ) message_error_to_user() Shortcut to display message on Exception","title":"ExtraButtonsMixin"},{"location":"api/mixin/#extrabuttonmixin","text":"Mixin to use with ModelAdmin to properly handle button decorators","title":"ExtraButtonMixin"},{"location":"api/mixin/#attributes","text":"change_list_template Default admin_extra_buttons/change_list.html change_form_template Default admin_extra_buttons/change_form.html","title":"Attributes"},{"location":"api/mixin/#methods","text":"get_changeform_buttons(context) Return the list of buttons that will be displayed on the change form page. Default implementation returns all the buttons with change_form=True or change_form=None get_changelist_buttons(context) Return the list of buttons that will be displayed on the changelist page. Default implementation returns all the buttons with change_list=True or change_list=None get_action_buttons(context) Return the list of buttons that will be displayed on the extra action page. get_common_context() This method returns a django template Context filled with the common values that can be useful when create custom views that render templates. (@see Build two steps action ) message_error_to_user() Shortcut to display message on Exception","title":"Methods"},{"location":"api/utils/","text":"","title":"Utils"},{"location":"api/view/","text":"@view () # Use this decorator to add views to any ModelAdmin. This decorator will not create any button. Options # pattern: <function_name>/<path:arg1>/<path:arg2>/.... url pattern to use for the url generation. permission: None Django permission code needed to access the view and display the button. Can be a callable login_required: True Set to False to allow access to anonymous users http_basic_auth: False Enable Basic Authentication for this view Examples # Simple # @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @view() def sele(self, request): HTTP Basic Authentication # @register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @view(http_basic_auth=True) def api4(self, request): return HttpResponse(\"Basic Authentication allowed\")","title":"@view"},{"location":"api/view/#view","text":"Use this decorator to add views to any ModelAdmin. This decorator will not create any button.","title":"@view()"},{"location":"api/view/#options","text":"pattern: <function_name>/<path:arg1>/<path:arg2>/.... url pattern to use for the url generation. permission: None Django permission code needed to access the view and display the button. Can be a callable login_required: True Set to False to allow access to anonymous users http_basic_auth: False Enable Basic Authentication for this view","title":"Options"},{"location":"api/view/#examples","text":"","title":"Examples"},{"location":"api/view/#simple","text":"@register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @view() def sele(self, request):","title":"Simple"},{"location":"api/view/#http-basic-authentication","text":"@register(MyModel) class MyModelAdmin(ExtrButtonsMixi, admin.ModelAdmin): @view(http_basic_auth=True) def api4(self, request): return HttpResponse(\"Basic Authentication allowed\")","title":"HTTP Basic Authentication"}]}